#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDescription(Description instance);
    partial void UpdateDescription(Description instance);
    partial void DeleteDescription(Description instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertKind(Kind instance);
    partial void UpdateKind(Kind instance);
    partial void DeleteKind(Kind instance);
    partial void InsertDishDetail(DishDetail instance);
    partial void UpdateDishDetail(DishDetail instance);
    partial void DeleteDishDetail(DishDetail instance);
    partial void InsertDrinkDetail(DrinkDetail instance);
    partial void UpdateDrinkDetail(DrinkDetail instance);
    partial void DeleteDrinkDetail(DrinkDetail instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDrink(OrderDrink instance);
    partial void UpdateOrderDrink(OrderDrink instance);
    partial void DeleteOrderDrink(OrderDrink instance);
    partial void InsertOrderDish(OrderDish instance);
    partial void UpdateOrderDish(OrderDish instance);
    partial void DeleteOrderDish(OrderDish instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WindowsFormsApp3.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Description> Descriptions
		{
			get
			{
				return this.GetTable<Description>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<Dish> Dishes
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<Kind> Kinds
		{
			get
			{
				return this.GetTable<Kind>();
			}
		}
		
		public System.Data.Linq.Table<DishDetail> DishDetails
		{
			get
			{
				return this.GetTable<DishDetail>();
			}
		}
		
		public System.Data.Linq.Table<DrinkDetail> DrinkDetails
		{
			get
			{
				return this.GetTable<DrinkDetail>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDrink> OrderDrinks
		{
			get
			{
				return this.GetTable<OrderDrink>();
			}
		}
		
		public System.Data.Linq.Table<OrderDish> OrderDishes
		{
			get
			{
				return this.GetTable<OrderDish>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Description")]
	public partial class Description : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _decription;
		
		private EntitySet<Dish> _Dishes;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OndecriptionChanging(string value);
    partial void OndecriptionChanged();
    #endregion
		
		public Description()
		{
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decription", DbType="VarChar(200)")]
		public string decription
		{
			get
			{
				return this._decription;
			}
			set
			{
				if ((this._decription != value))
				{
					this.OndecriptionChanging(value);
					this.SendPropertyChanging();
					this._decription = value;
					this.SendPropertyChanged("decription");
					this.OndecriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Dish", Storage="_Dishes", ThisKey="Id", OtherKey="idDescription")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Drink", Storage="_Drinks", ThisKey="Id", OtherKey="idDescription")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Order", Storage="_Orders", ThisKey="Id", OtherKey="idDescription")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Size")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _text;
		
		private System.Nullable<int> _value;
		
		private EntitySet<DishDetail> _DishDetails;
		
		private EntitySet<DrinkDetail> _DrinkDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnvalueChanging(System.Nullable<int> value);
    partial void OnvalueChanged();
    #endregion
		
		public Size()
		{
			this._DishDetails = new EntitySet<DishDetail>(new Action<DishDetail>(this.attach_DishDetails), new Action<DishDetail>(this.detach_DishDetails));
			this._DrinkDetails = new EntitySet<DrinkDetail>(new Action<DrinkDetail>(this.attach_DrinkDetails), new Action<DrinkDetail>(this.detach_DrinkDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(50)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Int")]
		public System.Nullable<int> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_DishDetail", Storage="_DishDetails", ThisKey="Id", OtherKey="idSize")]
		public EntitySet<DishDetail> DishDetails
		{
			get
			{
				return this._DishDetails;
			}
			set
			{
				this._DishDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_DrinkDetail", Storage="_DrinkDetails", ThisKey="Id", OtherKey="idSize")]
		public EntitySet<DrinkDetail> DrinkDetails
		{
			get
			{
				return this._DrinkDetails;
			}
			set
			{
				this._DrinkDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
		
		private void attach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private System.Nullable<int> _idDescription;
		
		private EntitySet<DishDetail> _DishDetails;
		
		private EntityRef<Description> _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidDescriptionChanging(System.Nullable<int> value);
    partial void OnidDescriptionChanged();
    #endregion
		
		public Dish()
		{
			this._DishDetails = new EntitySet<DishDetail>(new Action<DishDetail>(this.attach_DishDetails), new Action<DishDetail>(this.detach_DishDetails));
			this._Description = default(EntityRef<Description>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDescription", DbType="Int")]
		public System.Nullable<int> idDescription
		{
			get
			{
				return this._idDescription;
			}
			set
			{
				if ((this._idDescription != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDescriptionChanging(value);
					this.SendPropertyChanging();
					this._idDescription = value;
					this.SendPropertyChanged("idDescription");
					this.OnidDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishDetail", Storage="_DishDetails", ThisKey="Id", OtherKey="idDish")]
		public EntitySet<DishDetail> DishDetails
		{
			get
			{
				return this._DishDetails;
			}
			set
			{
				this._DishDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Dish", Storage="_Description", ThisKey="idDescription", OtherKey="Id", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._idDescription = value.Id;
					}
					else
					{
						this._idDescription = default(Nullable<int>);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drink")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private System.Nullable<bool> _adults;
		
		private System.Nullable<int> _idDescription;
		
		private EntitySet<DrinkDetail> _DrinkDetails;
		
		private EntityRef<Description> _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnadultsChanging(System.Nullable<bool> value);
    partial void OnadultsChanged();
    partial void OnidDescriptionChanging(System.Nullable<int> value);
    partial void OnidDescriptionChanged();
    #endregion
		
		public Drink()
		{
			this._DrinkDetails = new EntitySet<DrinkDetail>(new Action<DrinkDetail>(this.attach_DrinkDetails), new Action<DrinkDetail>(this.detach_DrinkDetails));
			this._Description = default(EntityRef<Description>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adults", DbType="Bit")]
		public System.Nullable<bool> adults
		{
			get
			{
				return this._adults;
			}
			set
			{
				if ((this._adults != value))
				{
					this.OnadultsChanging(value);
					this.SendPropertyChanging();
					this._adults = value;
					this.SendPropertyChanged("adults");
					this.OnadultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDescription", DbType="Int")]
		public System.Nullable<int> idDescription
		{
			get
			{
				return this._idDescription;
			}
			set
			{
				if ((this._idDescription != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDescriptionChanging(value);
					this.SendPropertyChanging();
					this._idDescription = value;
					this.SendPropertyChanged("idDescription");
					this.OnidDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_DrinkDetail", Storage="_DrinkDetails", ThisKey="Id", OtherKey="idDrink")]
		public EntitySet<DrinkDetail> DrinkDetails
		{
			get
			{
				return this._DrinkDetails;
			}
			set
			{
				this._DrinkDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Drink", Storage="_Description", ThisKey="idDescription", OtherKey="Id", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._idDescription = value.Id;
					}
					else
					{
						this._idDescription = default(Nullable<int>);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
		}
		
		private void detach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kind")]
	public partial class Kind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _text;
		
		private EntitySet<DishDetail> _DishDetails;
		
		private EntitySet<DrinkDetail> _DrinkDetails;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public Kind()
		{
			this._DishDetails = new EntitySet<DishDetail>(new Action<DishDetail>(this.attach_DishDetails), new Action<DishDetail>(this.detach_DishDetails));
			this._DrinkDetails = new EntitySet<DrinkDetail>(new Action<DrinkDetail>(this.attach_DrinkDetails), new Action<DrinkDetail>(this.detach_DrinkDetails));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(50)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_DishDetail", Storage="_DishDetails", ThisKey="Id", OtherKey="idKind")]
		public EntitySet<DishDetail> DishDetails
		{
			get
			{
				return this._DishDetails;
			}
			set
			{
				this._DishDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_DrinkDetail", Storage="_DrinkDetails", ThisKey="Id", OtherKey="idKind")]
		public EntitySet<DrinkDetail> DrinkDetails
		{
			get
			{
				return this._DrinkDetails;
			}
			set
			{
				this._DrinkDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Order", Storage="_Orders", ThisKey="Id", OtherKey="idKind")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_DishDetails(DishDetail entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
		
		private void attach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_DrinkDetails(DrinkDetail entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DishDetail")]
	public partial class DishDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _availability;
		
		private System.Nullable<byte> _idSize;
		
		private System.Nullable<byte> _idKind;
		
		private System.Nullable<decimal> _price;
		
		private System.Nullable<int> _tax;
		
		private int _idDish;
		
		private EntitySet<OrderDish> _OrderDishes;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Kind> _Kind;
		
		private EntityRef<Size> _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnavailabilityChanging(System.Nullable<bool> value);
    partial void OnavailabilityChanged();
    partial void OnidSizeChanging(System.Nullable<byte> value);
    partial void OnidSizeChanged();
    partial void OnidKindChanging(System.Nullable<byte> value);
    partial void OnidKindChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OntaxChanging(System.Nullable<int> value);
    partial void OntaxChanged();
    partial void OnidDishChanging(int value);
    partial void OnidDishChanged();
    #endregion
		
		public DishDetail()
		{
			this._OrderDishes = new EntitySet<OrderDish>(new Action<OrderDish>(this.attach_OrderDishes), new Action<OrderDish>(this.detach_OrderDishes));
			this._Dish = default(EntityRef<Dish>);
			this._Kind = default(EntityRef<Kind>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_availability", DbType="Bit")]
		public System.Nullable<bool> availability
		{
			get
			{
				return this._availability;
			}
			set
			{
				if ((this._availability != value))
				{
					this.OnavailabilityChanging(value);
					this.SendPropertyChanging();
					this._availability = value;
					this.SendPropertyChanged("availability");
					this.OnavailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSize", DbType="TinyInt")]
		public System.Nullable<byte> idSize
		{
			get
			{
				return this._idSize;
			}
			set
			{
				if ((this._idSize != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSizeChanging(value);
					this.SendPropertyChanging();
					this._idSize = value;
					this.SendPropertyChanged("idSize");
					this.OnidSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idKind", DbType="TinyInt")]
		public System.Nullable<byte> idKind
		{
			get
			{
				return this._idKind;
			}
			set
			{
				if ((this._idKind != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidKindChanging(value);
					this.SendPropertyChanging();
					this._idKind = value;
					this.SendPropertyChanged("idKind");
					this.OnidKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tax", DbType="Int")]
		public System.Nullable<int> tax
		{
			get
			{
				return this._tax;
			}
			set
			{
				if ((this._tax != value))
				{
					this.OntaxChanging(value);
					this.SendPropertyChanging();
					this._tax = value;
					this.SendPropertyChanged("tax");
					this.OntaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDish", DbType="Int NOT NULL")]
		public int idDish
		{
			get
			{
				return this._idDish;
			}
			set
			{
				if ((this._idDish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDishChanging(value);
					this.SendPropertyChanging();
					this._idDish = value;
					this.SendPropertyChanged("idDish");
					this.OnidDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DishDetail_OrderDish", Storage="_OrderDishes", ThisKey="Id", OtherKey="idDishDetail")]
		public EntitySet<OrderDish> OrderDishes
		{
			get
			{
				return this._OrderDishes;
			}
			set
			{
				this._OrderDishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishDetail", Storage="_Dish", ThisKey="idDish", OtherKey="Id", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.DishDetails.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.DishDetails.Add(this);
						this._idDish = value.Id;
					}
					else
					{
						this._idDish = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_DishDetail", Storage="_Kind", ThisKey="idKind", OtherKey="Id", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.DishDetails.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.DishDetails.Add(this);
						this._idKind = value.Id;
					}
					else
					{
						this._idKind = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_DishDetail", Storage="_Size", ThisKey="idSize", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.DishDetails.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.DishDetails.Add(this);
						this._idSize = value.Id;
					}
					else
					{
						this._idSize = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDishes(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.DishDetail = this;
		}
		
		private void detach_OrderDishes(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.DishDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrinkDetail")]
	public partial class DrinkDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _availability;
		
		private System.Nullable<byte> _idSize;
		
		private System.Nullable<byte> _idKind;
		
		private System.Nullable<decimal> _price;
		
		private System.Nullable<int> _tax;
		
		private int _idDrink;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<Kind> _Kind;
		
		private EntityRef<Size> _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnavailabilityChanging(System.Nullable<bool> value);
    partial void OnavailabilityChanged();
    partial void OnidSizeChanging(System.Nullable<byte> value);
    partial void OnidSizeChanged();
    partial void OnidKindChanging(System.Nullable<byte> value);
    partial void OnidKindChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OntaxChanging(System.Nullable<int> value);
    partial void OntaxChanged();
    partial void OnidDrinkChanging(int value);
    partial void OnidDrinkChanged();
    #endregion
		
		public DrinkDetail()
		{
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._Drink = default(EntityRef<Drink>);
			this._Kind = default(EntityRef<Kind>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_availability", DbType="Bit")]
		public System.Nullable<bool> availability
		{
			get
			{
				return this._availability;
			}
			set
			{
				if ((this._availability != value))
				{
					this.OnavailabilityChanging(value);
					this.SendPropertyChanging();
					this._availability = value;
					this.SendPropertyChanged("availability");
					this.OnavailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSize", DbType="TinyInt")]
		public System.Nullable<byte> idSize
		{
			get
			{
				return this._idSize;
			}
			set
			{
				if ((this._idSize != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSizeChanging(value);
					this.SendPropertyChanging();
					this._idSize = value;
					this.SendPropertyChanged("idSize");
					this.OnidSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idKind", DbType="TinyInt")]
		public System.Nullable<byte> idKind
		{
			get
			{
				return this._idKind;
			}
			set
			{
				if ((this._idKind != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidKindChanging(value);
					this.SendPropertyChanging();
					this._idKind = value;
					this.SendPropertyChanged("idKind");
					this.OnidKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tax", DbType="Int")]
		public System.Nullable<int> tax
		{
			get
			{
				return this._tax;
			}
			set
			{
				if ((this._tax != value))
				{
					this.OntaxChanging(value);
					this.SendPropertyChanging();
					this._tax = value;
					this.SendPropertyChanged("tax");
					this.OntaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDrink", DbType="Int NOT NULL")]
		public int idDrink
		{
			get
			{
				return this._idDrink;
			}
			set
			{
				if ((this._idDrink != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDrinkChanging(value);
					this.SendPropertyChanging();
					this._idDrink = value;
					this.SendPropertyChanged("idDrink");
					this.OnidDrinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkDetail_OrderDrink", Storage="_OrderDrinks", ThisKey="Id", OtherKey="idDrinkDetail")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_DrinkDetail", Storage="_Drink", ThisKey="idDrink", OtherKey="Id", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.DrinkDetails.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.DrinkDetails.Add(this);
						this._idDrink = value.Id;
					}
					else
					{
						this._idDrink = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_DrinkDetail", Storage="_Kind", ThisKey="idKind", OtherKey="Id", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.DrinkDetails.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.DrinkDetails.Add(this);
						this._idKind = value.Id;
					}
					else
					{
						this._idKind = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_DrinkDetail", Storage="_Size", ThisKey="idSize", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.DrinkDetails.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.DrinkDetails.Add(this);
						this._idSize = value.Id;
					}
					else
					{
						this._idSize = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.DrinkDetail = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.DrinkDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _text;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public Status()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(50)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Order", Storage="_Orders", ThisKey="Id", OtherKey="idStatus")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<byte> _idStatus;
		
		private System.Nullable<byte> _idKind;
		
		private System.Nullable<System.DateTime> _startDateTime;
		
		private System.Nullable<System.DateTime> _endDateTime;
		
		private System.Nullable<int> _idDescription;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntitySet<OrderDish> _OrderDishes;
		
		private EntityRef<Description> _Description;
		
		private EntityRef<Kind> _Kind;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidStatusChanging(System.Nullable<byte> value);
    partial void OnidStatusChanged();
    partial void OnidKindChanging(System.Nullable<byte> value);
    partial void OnidKindChanged();
    partial void OnstartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateTimeChanged();
    partial void OnendDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateTimeChanged();
    partial void OnidDescriptionChanging(System.Nullable<int> value);
    partial void OnidDescriptionChanged();
    #endregion
		
		public Order()
		{
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._OrderDishes = new EntitySet<OrderDish>(new Action<OrderDish>(this.attach_OrderDishes), new Action<OrderDish>(this.detach_OrderDishes));
			this._Description = default(EntityRef<Description>);
			this._Kind = default(EntityRef<Kind>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStatus", DbType="TinyInt")]
		public System.Nullable<byte> idStatus
		{
			get
			{
				return this._idStatus;
			}
			set
			{
				if ((this._idStatus != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStatusChanging(value);
					this.SendPropertyChanging();
					this._idStatus = value;
					this.SendPropertyChanged("idStatus");
					this.OnidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idKind", DbType="TinyInt")]
		public System.Nullable<byte> idKind
		{
			get
			{
				return this._idKind;
			}
			set
			{
				if ((this._idKind != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidKindChanging(value);
					this.SendPropertyChanging();
					this._idKind = value;
					this.SendPropertyChanged("idKind");
					this.OnidKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> startDateTime
		{
			get
			{
				return this._startDateTime;
			}
			set
			{
				if ((this._startDateTime != value))
				{
					this.OnstartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._startDateTime = value;
					this.SendPropertyChanged("startDateTime");
					this.OnstartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> endDateTime
		{
			get
			{
				return this._endDateTime;
			}
			set
			{
				if ((this._endDateTime != value))
				{
					this.OnendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._endDateTime = value;
					this.SendPropertyChanged("endDateTime");
					this.OnendDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDescription", DbType="Int")]
		public System.Nullable<int> idDescription
		{
			get
			{
				return this._idDescription;
			}
			set
			{
				if ((this._idDescription != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDescriptionChanging(value);
					this.SendPropertyChanging();
					this._idDescription = value;
					this.SendPropertyChanged("idDescription");
					this.OnidDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDrink", Storage="_OrderDrinks", ThisKey="Id", OtherKey="idOrder")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDish", Storage="_OrderDishes", ThisKey="Id", OtherKey="idOrder")]
		public EntitySet<OrderDish> OrderDishes
		{
			get
			{
				return this._OrderDishes;
			}
			set
			{
				this._OrderDishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_Order", Storage="_Description", ThisKey="idDescription", OtherKey="Id", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._idDescription = value.Id;
					}
					else
					{
						this._idDescription = default(Nullable<int>);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Order", Storage="_Kind", ThisKey="idKind", OtherKey="Id", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._idKind = value.Id;
					}
					else
					{
						this._idKind = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Order", Storage="_Status", ThisKey="idStatus", OtherKey="Id", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._idStatus = value.Id;
					}
					else
					{
						this._idStatus = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderDishes(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDishes(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDrink")]
	public partial class OrderDrink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idOrder;
		
		private int _idDrinkDetail;
		
		private EntityRef<DrinkDetail> _DrinkDetail;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidOrderChanging(int value);
    partial void OnidOrderChanged();
    partial void OnidDrinkDetailChanging(int value);
    partial void OnidDrinkDetailChanged();
    #endregion
		
		public OrderDrink()
		{
			this._DrinkDetail = default(EntityRef<DrinkDetail>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", DbType="Int NOT NULL")]
		public int idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDrinkDetail", DbType="Int NOT NULL")]
		public int idDrinkDetail
		{
			get
			{
				return this._idDrinkDetail;
			}
			set
			{
				if ((this._idDrinkDetail != value))
				{
					if (this._DrinkDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDrinkDetailChanging(value);
					this.SendPropertyChanging();
					this._idDrinkDetail = value;
					this.SendPropertyChanged("idDrinkDetail");
					this.OnidDrinkDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkDetail_OrderDrink", Storage="_DrinkDetail", ThisKey="idDrinkDetail", OtherKey="Id", IsForeignKey=true)]
		public DrinkDetail DrinkDetail
		{
			get
			{
				return this._DrinkDetail.Entity;
			}
			set
			{
				DrinkDetail previousValue = this._DrinkDetail.Entity;
				if (((previousValue != value) 
							|| (this._DrinkDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrinkDetail.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._DrinkDetail.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._idDrinkDetail = value.Id;
					}
					else
					{
						this._idDrinkDetail = default(int);
					}
					this.SendPropertyChanged("DrinkDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDrink", Storage="_Order", ThisKey="idOrder", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._idOrder = value.Id;
					}
					else
					{
						this._idOrder = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDish")]
	public partial class OrderDish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idOrder;
		
		private int _idDishDetail;
		
		private EntityRef<DishDetail> _DishDetail;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidOrderChanging(int value);
    partial void OnidOrderChanged();
    partial void OnidDishDetailChanging(int value);
    partial void OnidDishDetailChanged();
    #endregion
		
		public OrderDish()
		{
			this._DishDetail = default(EntityRef<DishDetail>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", DbType="Int NOT NULL")]
		public int idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDishDetail", DbType="Int NOT NULL")]
		public int idDishDetail
		{
			get
			{
				return this._idDishDetail;
			}
			set
			{
				if ((this._idDishDetail != value))
				{
					if (this._DishDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDishDetailChanging(value);
					this.SendPropertyChanging();
					this._idDishDetail = value;
					this.SendPropertyChanged("idDishDetail");
					this.OnidDishDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DishDetail_OrderDish", Storage="_DishDetail", ThisKey="idDishDetail", OtherKey="Id", IsForeignKey=true)]
		public DishDetail DishDetail
		{
			get
			{
				return this._DishDetail.Entity;
			}
			set
			{
				DishDetail previousValue = this._DishDetail.Entity;
				if (((previousValue != value) 
							|| (this._DishDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DishDetail.Entity = null;
						previousValue.OrderDishes.Remove(this);
					}
					this._DishDetail.Entity = value;
					if ((value != null))
					{
						value.OrderDishes.Add(this);
						this._idDishDetail = value.Id;
					}
					else
					{
						this._idDishDetail = default(int);
					}
					this.SendPropertyChanged("DishDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDish", Storage="_Order", ThisKey="idOrder", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDishes.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDishes.Add(this);
						this._idOrder = value.Id;
					}
					else
					{
						this._idOrder = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
